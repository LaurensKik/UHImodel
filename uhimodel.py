# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UHIModel
                                 A QGIS plugin
 Impact temperature with new land uses
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-07-10
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Laurens Kik/MovaresNL
        email                : laurenskik@movares.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import pandas as pd

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QTableWidgetItem
from qgis.utils import iface

from qgis.core import QgsFeature, QgsField, QgsProject, QgsGeometry,\
    QgsCoordinateTransform, QgsCoordinateTransformContext, QgsMapLayer,\
    QgsFeatureRequest, QgsVectorLayer, QgsLayerTreeGroup, QgsRenderContext,\
    QgsCoordinateReferenceSystem, QgsWkbTypes, QgsVectorDataProvider, QgsRasterLayer
import processing

import subprocess, os, sys, glob
try:
    from osgeo import gdal
    from osgeo import osr
except:
    import gdal
    import osr




from .qdrawlayerdialog import QDrawLayerDialog
from qdraw.drawtools import DrawPolygon
from qdraw.qdrawsettings import QdrawSettings

#from qdrawlayerdialog import Objects

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .uhimodel_dialog import UHIModelDialog
import os.path

class UHIModel:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'UHIModel_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&uhimodel')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Define statusBar
        self.sb = self.iface.statusBarIface()

        # Define tool, toolname and settings for drawing polygons
        self.tool = None
        self.toolname = None
        self.settings = QdrawSettings()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('UHIModel', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/uhimodel/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'UHIModel'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&uhimodel'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file:", "", '*.tif')
        self.dlg.LE_output.setText(filename)

    def select_input_file_temp(self):
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, "Select temperature map:")
        self.dlg.TB_temp.setText(filename)

    def select_input_file_landuse(self):
        global filelanduse
        filelanduse, _filter = QFileDialog.getOpenFileName(self.dlg, "Select land use map:")
        self.dlg.TB_landuse.setText(filelanduse)

    def addLandUsetoLayer(self):
        chsnlanduse = self.dlg.CB_newlanduse.currentText()
        chsnlanduselayer = self.dlg.CB_newlanduselayer.currentText()

        landuserastvalue = {'Trees on grass': 1, 'Trees on avenue': 2, 'Grass field': 3,
                            'Green roofs': 4, 'Cool roofs': 5, 'Facade greening': 6,
                            'Solar Panels': 7, 'Pond/river': 8, 'Fountain': 9, 'Surface albedo change': 10}

        vLayer = QgsProject.instance().mapLayersByName(chsnlanduselayer)[0]
        vLayer.startEditing()
        if QgsVectorDataProvider.AddAttributes:
            vLayer.dataProvider().addAttributes([QgsField("Land use", QVariant.String),
                                                 QgsField("LandUseValue", QVariant.Int)])
            vLayer.updateFields()

        caps = vLayer.dataProvider().capabilities()
        if caps & QgsVectorDataProvider.ChangeAttributeValues:
            attrs = {1: chsnlanduse, 2: int(landuserastvalue.get(chsnlanduse))}
            vLayer.dataProvider().changeAttributeValues({1: attrs})

        vLayer.commitChanges()

        # change color of polygons
        single_symbol_renderer = vLayer.renderer()

        symbol = single_symbol_renderer.symbol()

        for feature in vLayer.getFeatures():
            if feature['LandUseValue'] < 4:
                symbol.setColor(QColor.fromRgb(178, 223, 138))
            elif feature['LandUseValue'] > 3 and feature['LandUseValue'] < 8:
                symbol.setColor(QColor.fromRgb(215, 25, 28))
            elif feature['LandUseValue'] > 7 and feature['LandUseValue'] < 10:
                symbol.setColor(QColor.fromRgb(82, 185, 248))
            else:
                symbol.setColor(QColor.fromRgb(154, 157, 153))

        # more efficient than refreshing the whole canvas, which requires a redraw of ALL layers
        vLayer.triggerRepaint()

        # update table of contents for layer
        iface.layerTreeView().refreshLayerSymbology(vLayer.id())

        self.fillObjectsTable(vLayer)

    def fillObjectsTable(self, vLayer):

        qTable = self.dlg.TW_objects

        feats_count = vLayer.featureCount()

        # print(feats_count)

        group = QgsProject.instance().layerTreeRoot().findGroup('Drawings')
        # Iterate group to get list of layer names
        layers = [layer.name() for layer in group.children()]

        # print(len(layers))

        nb_row = len(layers)
        nb_col = feats_count + 2

        qTable.setRowCount(nb_row)
        qTable.setColumnCount(nb_col)

        layers2 = [layer for layer in group.children()]
        for layer in layers2:
            print(layers2)
            features = layers2.getFeatures()

        for feature in features:
            for row in range(1):
                for col in range(2):
                    for attr in feature.attributes():
                        print(attr)
                        item = QTableWidgetItem(attr)
                        qTable.setItem(row, col, item)


        # for row in range(nb_row):
        #     for col in range(nb_col):
        #         item = QTableWidgetItem(str(layers[0][2]))
        #         qTable.setItem(row, col, item)

        qTable.setHorizontalHeaderLabels([u'Name', u'Land use', u'Land use value'])

        qTable.resizeColumnsToContents()


    def run(self):
        """Run method that performs all the real work"""
        #layers = self.iface.legendInterface().layers()
        #layer_list = []
        #for layer in layers:
            #layer_list.append(layer.name())

        #self.dlg.CB_temp.addItems(layer_list)

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = UHIModelDialog()

            #Click to connect output, temp and landuse buttons to its uses
            self.dlg.TB_output.clicked.connect(self.select_output_file)
            self.dlg.TB_temp.clicked.connect(self.select_input_file_temp)
            self.dlg.TB_landuse.clicked.connect(self.select_input_file_landuse)

        #connect "Draw Polygon" button to use


        # Fill the Combo and Toolboxes with Temperature and Land Use maps
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.CB_temp.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.CB_temp.addItems([layer.name() for layer in layers])

        self.dlg.CB_newlanduselayer.clear()
        group = QgsProject.instance().layerTreeRoot().findGroup('Drawings')
        # Iterate group to get list of layer names
        layers = [layer.name() for layer in group.children()]
        self.dlg.CB_newlanduselayer.addItems(layers)


        LandUseTypes = ['Trees on grass', 'Trees on avenue', 'Grass field', 'Green roofs', 'Cool roofs',
                        'Facade greening', 'Solar Panels', 'Pond/river', 'Fountain', 'Surface albedo change']
        self.dlg.CB_newlanduse.clear()
        self.dlg.CB_newlanduse.insertItems(0, LandUseTypes)


        #Fill the layers with new Land Use
        self.dlg.Confirm_newlanduse.clicked.connect(self.addLandUsetoLayer)

        # create DataFrame with temperature values
        df = pd.DataFrame(columns=['Green areas', 'Buildings and Paved Environments', 'Bodies of water'],
        index=['Trees on grass', 'Trees on avenue', 'Grass field', 'Green roofs', 'Cool roofs',
                        'Facade greening', 'Solar Panels', 'Pond/river', 'Fountain', 'Surface albedo change'])

        df.loc['Trees on grass'] = pd.Series({'Green areas': -0.65, 'Buildings and Paved Environments': -1.65, 'Bodies of water': -0.75})
        df.loc['Trees on avenue'] = pd.Series(
            {'Green areas': 0, 'Buildings and Paved Environments': -1, 'Bodies of water': -0.1})
        df.loc['Grass field'] = pd.Series(
            {'Green areas': 0, 'Buildings and Paved Environments': -1, 'Bodies of water': -0.1})
        df.loc['Green roofs'] = pd.Series(
            {'Green areas': 0.48, 'Buildings and Paved Environments': -0.52, 'Bodies of water': 0.38})
        df.loc['Cool roofs'] = pd.Series(
            {'Green areas': 0.48, 'Buildings and Paved Environments': -0.52, 'Bodies of water': 0.38})
        df.loc['Facade greening'] = pd.Series(
            {'Green areas': 0.7, 'Buildings and Paved Environments': -0.3, 'Bodies of water': 0.6})
        df.loc['Solar Panels'] = pd.Series(
            {'Green areas': 1, 'Buildings and Paved Environments': 0, 'Bodies of water': 0.9})
        df.loc['Pond/river'] = pd.Series(
            {'Green areas': 0.1, 'Buildings and Paved Environments': -0.9, 'Bodies of water': 0})
        df.loc['Fountain'] = pd.Series(
            {'Green areas': -2.0, 'Buildings and Paved Environments': -3.0, 'Bodies of water': -2.1})
        df.loc['Surface albedo change'] = pd.Series(
            {'Green areas': 0.4, 'Buildings and Paved Environments': -0.6, 'Bodies of water': 0.3})


        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.CB_landuse.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.CB_landuse.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # root = QgsProject.instance().layerTreeRoot()
            group = QgsProject.instance().layerTreeRoot().findGroup('Drawings')
            layers = [layer.name() for layer in group.children()]



            # Merge Vector layers in 'Drawings'
            processing.run("native:mergevectorlayers", {'LAYERS': layers,
                'CRS': None,
                'OUTPUT': r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\MergeUHI9.shp'})

            processing.run("saga:rasterize",
                           {'INPUT': 'C:/Users/kiklf/OneDrive - Movares/Laurensmei2019/QGIS_Plugin/MergeUHI9.shp',
                            'FIELD': 'LandUseVal', 'OUTPUT': 2, 'MULTIPLE': 3, 'LINE_TYPE': 1, 'POLY_TYPE': 1,
                            'GRID_TYPE': 2,
                            'TARGET_USER_XMIN TARGET_USER_XMAX TARGET_USER_YMIN TARGET_USER_YMAX': None,
                            'TARGET_USER_SIZE': 30, 'TARGET_USER_FITS': 1, 'GRID': r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\RastUHI4.sdat'})

            hDataset = gdal.Open(r'C:\Users\kiklf\Documents\ZeelandLST01072018RD', gdal.GA_ReadOnly)
            adfGeoTransform = hDataset.GetGeoTransform(can_return_null=True)
            if adfGeoTransform is not None:
                dfGeoXUL = adfGeoTransform[0]
                dfGeoYUL = adfGeoTransform[3]
                dfGeoXLR = adfGeoTransform[0] + adfGeoTransform[1] * hDataset.RasterXSize + adfGeoTransform[
                    2] * hDataset.RasterYSize
                dfGeoYLR = adfGeoTransform[3] + adfGeoTransform[4] * hDataset.RasterXSize + adfGeoTransform[
                    5] * hDataset.RasterYSize
                xres = str(abs(adfGeoTransform[1]))
                yres = str(abs(adfGeoTransform[5]))
                subprocess.call(
                    ["gdalbuildvrt", "10426.0913000002001354,350106.2999999993480742 : 91726.0913000002037734,434856.2999999993480742"] +
                    [str(dfGeoXUL), str(dfGeoYLR), str(dfGeoXLR), str(dfGeoYUL), "30", xres, yres,
                     r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\GDALAlignUHI.vrt',
                     r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\RastUHI4.sdat'])
                gdal_translate r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\GDALAlignUHI.vrt' r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\GDALAlignUHI.vrt.tif'

                # processing.run("saga:resampling", {
            #     'INPUT': r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\RastUHI3.sdat',
            #     'KEEP_TYPE': True, 'SCALE_UP': 0, 'SCALE_DOWN': 0,
            #     'TARGET_USER_XMIN TARGET_USER_XMAX TARGET_USER_YMIN TARGET_USER_YMAX': None, 'TARGET_USER_SIZE': 30,
            #     'TARGET_USER_FITS': 1, 'TARGET_TEMPLATE': 'C:/Users/kiklf/Documents/BBG_10-30m_RD',
            #     'OUTPUT': r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\WarpUHI.sdat'})
            #
            # CRSlayer = QgsRasterLayer(r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\'', "RastUHI3")
            # CRSInput = CRSlayer.crs().authid()
            # print(CRSInput)
            #
            # # global filelanduse
            # # print(filelanduse)
            # # CRSOutput = filelanduse.crs().authid()
            # # print(CRSOutput)
            #
            # processing.run("gdal:warpreproject", {
            #     'INPUT': r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\WarpUHI.sdat',
            #     'SOURCE_CRS': QgsCoordinateReferenceSystem(CRSInput),
            #     'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:28992'), 'RESAMPLING': 0, 'NODATA': None,
            #     'TARGET_RESOLUTION': None, 'OPTIONS': '', 'DATA_TYPE': 0, 'TARGET_EXTENT': None,
            #     'TARGET_EXTENT_CRS': None, 'MULTITHREADING': False, 'EXTRA': '',
            #     'OUTPUT': r'C:\Users\kiklf\OneDrive - Movares\Laurensmei2019\QGIS_Plugin\EndResult2.sdat'})

            # with open("TestPlugin.txt", "w") as text_file:
            #     print(df.to_string())
